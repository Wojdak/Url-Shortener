@page "/"
@inject HttpClient _http
@inject IJSRuntime JSRuntime

<div class="d-flex flex-column justify-content-center align-items-center mb-5 info">
    <h1>URLSlice</h1>
    <p class="p-info">View the code on GitHub: <a href="https://github.com/Wojdak/Url-Shortener" target="_blank">GitHub Repository</a></p>
</div>


<div class="d-flex justify-content-center main-container">
    @if (!string.IsNullOrWhiteSpace(shortenedUrl))
    {
        <div class="card">
            <div class="card-body">
                <div class="text-center">
                    <p class="mb-2">Shortened URL:</p>

                    <div class="d-flex justify-content-center align-items-center mb-3">
                        <a href="@shortenedUrl" target="_blank" class="mr-2 url-link">@shortenedUrl</a>
                        <!-- Conditionally render the "Copy to Clipboard" button -->
                        @if (!shortenedUrl.StartsWith("Error:"))
                        {
                            <span class="copy-button" @onclick="CopyToClipboard">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                                    <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                                    <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                                </svg>
                            </span>
                        }
                    </div>

                    <button class="btn btn-primary reset-button" @onclick="ResetForm">Shorten another URL</button>
                </div>
            </div>
        </div>
    } else
    {
        <EditForm Model="@urlForm" OnValidSubmit="@HandleSubmit">
            <div class="card">
                <div class="card-body">

                    <h5 class="card-title mt-2 mb-3">
                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" class="bi bi-link-45deg" viewBox="0 0 16 16">
                            <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z" />
                            <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z" />
                        </svg>
                        Shorten URL
                    </h5>
                    <InputText id="longUrl" class="form-control input-field" @bind-Value="urlForm.LongUrl" placeholder="Enter long link here"></InputText>
                    <ValidationMessage For="@(() => urlForm.LongUrl)"></ValidationMessage>

                    <h5 class="card-title mt-4 mb-3">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-brush" viewBox="0 0 16 16">
                            <path d="M15.825.12a.5.5 0 0 1 .132.584c-1.53 3.43-4.743 8.17-7.095 10.64a6.067 6.067 0 0 1-2.373 1.534c-.018.227-.06.538-.16.868-.201.659-.667 1.479-1.708 1.74a8.118 8.118 0 0 1-3.078.132 3.659 3.659 0 0 1-.562-.135 1.382 1.382 0 0 1-.466-.247.714.714 0 0 1-.204-.288.622.622 0 0 1 .004-.443c.095-.245.316-.38.461-.452.394-.197.625-.453.867-.826.095-.144.184-.297.287-.472l.117-.198c.151-.255.326-.54.546-.848.528-.739 1.201-.925 1.746-.896.126.007.243.025.348.048.062-.172.142-.38.238-.608.261-.619.658-1.419 1.187-2.069 2.176-2.67 6.18-6.206 9.117-8.104a.5.5 0 0 1 .596.04zM4.705 11.912a1.23 1.23 0 0 0-.419-.1c-.246-.013-.573.05-.879.479-.197.275-.355.532-.5.777l-.105.177c-.106.181-.213.362-.32.528a3.39 3.39 0 0 1-.76.861c.69.112 1.736.111 2.657-.12.559-.139.843-.569.993-1.06a3.122 3.122 0 0 0 .126-.75l-.793-.792zm1.44.026c.12-.04.277-.1.458-.183a5.068 5.068 0 0 0 1.535-1.1c1.9-1.996 4.412-5.57 6.052-8.631-2.59 1.927-5.566 4.66-7.302 6.792-.442.543-.795 1.243-1.042 1.826-.121.288-.214.54-.275.72v.001l.575.575zm-4.973 3.04.007-.005a.031.031 0 0 1-.007.004zm3.582-3.043.002.001h-.002z" />
                        </svg>
                        Customize your short link
                    </h5>
                    <InputText id="customUrl" class="form-control input-field" @bind-Value="urlForm.CustomUrl" placeholder="Leave empty for random link"></InputText>
                    <ValidationMessage For="@(() => urlForm.CustomUrl)"></ValidationMessage>

                    <div class="text-center pb-1 mt-2">
                        <button type="submit" class="btn mt-3 rounded">Shorten URL</button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>


@code {
    private UrlForm urlForm = new UrlForm();
    private string shortenedUrl = string.Empty;
    private bool submitClicked = false;

    public class UrlForm
    {
        public string LongUrl { get; set; } = string.Empty;
        public string? CustomUrl { get; set; } = string.Empty;
    }

    private async Task HandleSubmit()
    {
        submitClicked = true;

        if (string.IsNullOrWhiteSpace(urlForm.CustomUrl)) urlForm.CustomUrl = null;

        var payload = new { LongUrl = urlForm.LongUrl, CustomUrl = urlForm.CustomUrl };
        var response = await _http.PostAsJsonAsync("/shorten", payload);

        HandleResponse(response);
    }

    private async void HandleResponse(HttpResponseMessage response)
    {
        var urlAsString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            shortenedUrl = urlAsString.Replace("\"", "");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            errorMessage = errorMessage.Replace("\"", "");
            shortenedUrl = $"Error: {errorMessage}";
        }
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", shortenedUrl);
    }

    private void ResetForm()
    {
        shortenedUrl = string.Empty;
        submitClicked = false;
        urlForm = new UrlForm();
    }

}
